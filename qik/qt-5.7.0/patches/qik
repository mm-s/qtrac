Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/global.pri
===================================================================
--- qt-everywhere-opensource-src-5.7.0.orig/qtbase/src/corelib/global/global.pri
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/global.pri
@@ -18,7 +18,8 @@ HEADERS +=  \
         global/qtypetraits.h \
         global/qflags.h \
         global/qhooks_p.h \
-        global/qversiontagging.h
+        global/qversiontagging.h \
+        global/qik.h
 
 SOURCES += \
         global/archdetect.cpp \
@@ -29,7 +30,8 @@ SOURCES += \
         global/qnumeric.cpp \
         global/qlogging.cpp \
         global/qhooks.cpp \
-        global/qversiontagging.cpp
+        global/qversiontagging.cpp \
+        global/qik.cpp
 
 # qlibraryinfo.cpp includes qconfig.cpp
 INCLUDEPATH += $$QT_BUILD_TREE/src/corelib/global
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qik.cpp
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qik.cpp
@@ -0,0 +1,77 @@
+#include "qik.h"
+#include <stdio.h>
+#include <QThread>
+#include <Qtrac>
+#include <QSettings>
+#include <sstream>
+#include <iostream>
+#include <QProcessEnvironment>
+
+using namespace qtrac;
+using namespace std;
+
+typedef qtrac::qik c;
+
+c _qik_instance;
+
+c::qik():debug(false) {
+	QProcessEnvironment env=QProcessEnvironment::systemEnvironment();
+	if (env.contains(QString::fromLatin1("QTRAC_DEBUG"))) {
+		debug=true;
+	}
+	if (!env.contains(QString::fromLatin1("QTRAC_NOBANNER"))) {
+		qtrac::banner(stdout);
+	}
+
+	QSettings settings(QString::fromLatin1("Qtrac"), QString::fromLatin1("qik"));
+	{
+		if (env.contains(QString::fromLatin1("QTRAC_OUTPUT_FILENAME"))) {
+			output_filename=env.value(QString::fromLatin1("QTRAC_OUTPUT_FILENAME"));
+		}
+		else {
+			if (!settings.contains(QString::fromLatin1("output/filename")))
+				settings.setValue(QString::fromLatin1("output/filename"), QString::fromLatin1("qtrac.out")); //file
+		
+			output_filename=settings.value(QString::fromLatin1("output/filename")).toString();
+		}
+		if (debug) cout << "output_filename=" << output_filename.toStdString() << endl;
+	}
+
+	{
+		if (env.contains(QString::fromLatin1("QTRAC_OUTPUT_SOCKET"))) {
+			output_socket=env.value(QString::fromLatin1("QTRAC_OUTPUT_SOCKET")).asString();
+		}
+		else {
+			if (!settings.contains(QString::fromLatin1("output/socket")))
+				settings.setValue(QString::fromLatin1("output/socket"), QString::fromLatin1(""));
+			output_socket=settings.value(QString::fromLatin1("output/socket")).toString();
+		}
+		if (debug) cout << "output_socket=" << output_socket.toStdString() << endl;
+	}
+}
+
+c::~qik() {
+}
+
+qik& c::instance() {
+	return _qik_instance;
+}
+
+void c::log(string data, void* o) {
+	Qt::HANDLE tid=QThread::currentThreadId();
+	ostringstream os;
+	os << tid << " " << o << " " << data;
+	
+
+}
+
+void c::read_conf() {
+
+}
+
+
+
+
+
+
+
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qik.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qik.h
@@ -0,0 +1,28 @@
+#ifndef QTRAC_QIK
+#define QTRAC_QIK
+
+#include <string>
+
+namespace qtrac {
+
+
+class qik {
+public:
+	qik();
+	~qik();
+
+	void log(std::string data, void*);
+	static qik& instance();
+
+	void read_conf();
+
+	bool debug;
+	QString output_filename;
+	QString output_socket;
+
+};
+
+
+}
+
+#endif
Index: qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/Qtrac
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/Qtrac
@@ -0,0 +1,2 @@
+#include "qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/qtrac.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/qtrac.h
@@ -0,0 +1,3 @@
+#include "../../src/corelib/global/qik.h"
+#include "../../src/corelib/global/qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/generator.cpp
===================================================================
--- qt-everywhere-opensource-src-5.7.0.orig/qtbase/src/tools/moc/generator.cpp
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/generator.cpp
@@ -1158,8 +1158,11 @@ void Generator::generateStaticMetacall()
             const FunctionDef &f = methodList.at(methodindex);
             Q_ASSERT(!f.normalizedType.isEmpty());
             fprintf(out, "        case %d: ", methodindex);
+            fprintf(out, "{\n          ");
+            fprintf(out, "qtrac::qik::instance().log(\"%s\",_o);\n          ",f.traceData(*cdef).c_str());
+
             if (f.normalizedType != "void")
-                fprintf(out, "{ %s _r = ", noRef(f.normalizedType).constData());
+                fprintf(out, "%s _r = ", noRef(f.normalizedType).constData());
             fprintf(out, "_t->");
             if (f.inPrivateClass.size())
                 fprintf(out, "%s->", f.inPrivateClass.constData());
@@ -1181,11 +1184,11 @@ void Generator::generateStaticMetacall()
             }
             fprintf(out, ");");
             if (f.normalizedType != "void") {
-                fprintf(out, "\n            if (_a[0]) *reinterpret_cast< %s*>(_a[0]) = _r; } ",
+                fprintf(out, "\n         if (_a[0]) *reinterpret_cast< %s*>(_a[0]) = _r;\n          ",
                         noRef(f.normalizedType).constData());
                 isUsed_a = true;
             }
-            fprintf(out, " break;\n");
+            fprintf(out, " break;\n          }\n");
         }
         fprintf(out, "        default: ;\n");
         fprintf(out, "        }\n");
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/moc.cpp
===================================================================
--- qt-everywhere-opensource-src-5.7.0.orig/qtbase/src/tools/moc/moc.cpp
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/moc.cpp
@@ -34,12 +34,26 @@
 #include <QtCore/qfile.h>
 #include <QtCore/qfileinfo.h>
 #include <QtCore/qdir.h>
+#include <QtCore/qtrac_bootstrap.h>
+#include <sstream>
 
 // for normalizeTypeInternal
 #include <private/qmetaobject_moc_p.h>
 
+
+
 QT_BEGIN_NAMESPACE
 
+std::string FunctionDef::traceData(const ClassDef& cd) const {
+	std::ostringstream os;
+	if (isSignal) os << "N";
+	else if (isSlot) os << "T";
+	else os << "?";
+    os << " " << cd.classname.toStdString() << "::" << name.toStdString() << "(" << arguments.size() << ") " << file.toStdString() << ":" << line;
+	return os.str();
+}
+
+
 // only moc needs this function
 static QByteArray normalizeType(const QByteArray &ba, bool fixScope = false)
 {
@@ -419,7 +433,8 @@ bool Moc::parseFunction(FunctionDef *def
     }
 
     def->normalizedType = normalizeType(def->type.name);
-
+	def->file=filename;
+	def->line=symbols[index].lineNum;
     if (!test(RPAREN)) {
         parseFunctionArguments(def);
         next(RPAREN);
@@ -871,6 +886,9 @@ void Moc::generate(FILE *out)
     fprintf(out, "** WARNING! All changes made in this file will be lost!\n"
             "*****************************************************************************/\n\n");
 
+	fprintf(out, "/*\n");
+	qtrac::banner(out);
+	fprintf(out, "*/\n");
 
     if (!noInclude) {
         if (includePath.size() && !includePath.endsWith('/'))
@@ -897,6 +915,7 @@ void Moc::generate(FILE *out)
     for (const QByteArray &qtContainer : qtContainers)
         fprintf(out, "#include <QtCore/%s>\n", qtContainer.constData());
 
+    fprintf(out, "#include <QtCore/Qtrac>\n");
 
     fprintf(out, "#if !defined(Q_MOC_OUTPUT_REVISION)\n"
             "#error \"The header file '%s' doesn't include <QObject>.\"\n", fn.constData());
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/moc.h
===================================================================
--- qt-everywhere-opensource-src-5.7.0.orig/qtbase/src/tools/moc/moc.h
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/moc/moc.h
@@ -38,6 +38,7 @@
 #include <qjsonobject.h>
 #include <stdio.h>
 #include <ctype.h>
+#include <string>
 
 QT_BEGIN_NAMESPACE
 
@@ -80,12 +81,14 @@ struct ArgumentDef
 };
 Q_DECLARE_TYPEINFO(ArgumentDef, Q_MOVABLE_TYPE);
 
+struct ClassDef;
+
 struct FunctionDef
 {
     FunctionDef(): returnTypeIsVolatile(false), access(Private), isConst(false), isVirtual(false), isStatic(false),
                    inlineCode(false), wasCloned(false), isCompat(false), isInvokable(false),
                    isScriptable(false), isSlot(false), isSignal(false), isPrivateSignal(false),
-                   isConstructor(false), isDestructor(false), isAbstract(false), revision(0) {}
+                   isConstructor(false), isDestructor(false), isAbstract(false), revision(0), line(-1) {}
     Type type;
     QByteArray normalizedType;
     QByteArray tag;
@@ -114,6 +117,10 @@ struct FunctionDef
     bool isAbstract;
 
     int revision;
+
+	QByteArray file;
+	int line;
+	std::string traceData(const ClassDef&) const;
 };
 Q_DECLARE_TYPEINFO(FunctionDef, Q_MOVABLE_TYPE);
 
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/bootstrap/bootstrap.pro
===================================================================
--- qt-everywhere-opensource-src-5.7.0.orig/qtbase/src/tools/bootstrap/bootstrap.pro
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/tools/bootstrap/bootstrap.pro
@@ -36,6 +36,7 @@ SOURCES += \
            ../../corelib/global/qlogging.cpp \
            ../../corelib/global/qmalloc.cpp \
            ../../corelib/global/qnumeric.cpp \
+           ../../corelib/global/qtrac.cpp \
            ../../corelib/io/qabstractfileengine.cpp \
            ../../corelib/io/qbuffer.cpp \
            ../../corelib/io/qdatastream.cpp \
Index: qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/qtrac_bootstrap.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/include/QtCore/qtrac_bootstrap.h
@@ -0,0 +1,2 @@
+#include "../../src/corelib/global/qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qtrac.cpp
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qtrac.cpp
@@ -0,0 +1,32 @@
+#include "qtrac.h"
+
+void qtrac::banner(FILE* out) {
+fprintf(out, ".                                                                                .\n");
+fprintf(out, ".                                      >WWw,                                     .\n");
+fprintf(out, ".                                       `)WWW                                    .\n");
+fprintf(out, ".                                         )8WWu                ,uwu,             .\n");
+fprintf(out, ".                                          88WWWu            yWWWWWWWW,          .\n");
+fprintf(out, ".                                           `8WWWWwu,       8#WWWWWWWW`          .\n");
+fprintf(out, ".                                             '8WWWWWWWWwwwWWWWWWWWW*`           .\n");
+fprintf(out, ".                                               `8WWWWWWWWWWWWWWWW*`             .\n");
+fprintf(out, ".                                                ##WWWWWWWWWWWW*`                .\n");
+fprintf(out, ".   ,,,ywu                                     y#WWWWWWWWWWWWWWWWWWWWWWWwwuuywwW>.\n");
+fprintf(out, ".WWWWWWWWWWWWWWWWWWwu,                       ,&#WWWWWWWWWWWWWWWWW==WWWWW=====**^ .\n");
+fprintf(out, ". `^***====WWWWWWWWWWWWWWwwu,,,,uwWWWWWWw,,uWWWWWWWWWWWWWWWWW`                   .\n");
+fprintf(out, ".            `*===WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW                     .\n");
+fprintf(out, ".                 `=WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW*`                      .\n");
+fprintf(out, ".                    `*==WWWWWWWWWWWWWWWWWWWWWWWWWWWW*`                          .\n");
+fprintf(out, ".                        `*==WWWWWWWWWWWWWWWWWWWW=*`                             .\n");
+fprintf(out, ".                             ^*===WWWWWWWWWW=*`                                 .\n");
+fprintf(out, ".                    .d88888b.  888                                              .\n");
+fprintf(out, ".                   d88P' 'Y88b 888                                              .\n");
+fprintf(out, ".                   888     888 888                                              .\n");
+fprintf(out, ".                   888     888 888888 888d888 8888b.   .d8888b                  .\n");
+fprintf(out, ".                   888     888 888    888P'      '88b d88P'                     .\n");
+fprintf(out, ".                   888 Y8b 888 888    888    .d888888 888                       .\n");
+fprintf(out, ".                   Y88b.Y8b88P Y88b.  888    888  888 Y88b.                     .\n");
+fprintf(out, ".                    'Y888888'   'Y888 888    'Y888888  'Y8888P                  .\n");
+fprintf(out, ".                          Y8b                                                   .\n");
+fprintf(out, ".                                                                                .\n");
+}
+
Index: qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qtrac.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0/qtbase/src/corelib/global/qtrac.h
@@ -0,0 +1,16 @@
+#ifndef QTRAC_QTRAC
+#define QTRAC_QTRAC
+
+#include <string>
+#include <cstdio>
+
+namespace qtrac {
+
+void banner(FILE*);
+
+
+}
+
+#endif
+
+
