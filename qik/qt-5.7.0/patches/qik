Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/global.pri
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/corelib/global/global.pri
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/global.pri
@@ -18,7 +18,9 @@ HEADERS +=  \
         global/qtypetraits.h \
         global/qflags.h \
         global/qhooks_p.h \
-        global/qversiontagging.h
+        global/qversiontagging.h \
+        global/qik.h \
+        global/qtrac.h
 
 SOURCES += \
         global/archdetect.cpp \
@@ -29,7 +31,9 @@ SOURCES += \
         global/qnumeric.cpp \
         global/qlogging.cpp \
         global/qhooks.cpp \
-        global/qversiontagging.cpp
+        global/qversiontagging.cpp \
+        global/qik.cpp \
+        global/qtrac.cpp
 
 # qlibraryinfo.cpp includes qconfig.cpp
 INCLUDEPATH += $$QT_BUILD_TREE/src/corelib/global
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qik.cpp
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qik.cpp
@@ -0,0 +1,188 @@
+#include "qik.h"
+#include <stdio.h>
+#include <QThread>
+#include <Qtrac>
+#include <QSettings>
+#include <sstream>
+#include <iostream>
+#include <QProcessEnvironment>
+#include <QTextStream>
+
+using namespace qtrac;
+using namespace std;
+
+typedef qtrac::qik c;
+
+c _qik_instance;
+
+c::qik(): port(0) {
+	QProcessEnvironment env=QProcessEnvironment::systemEnvironment();
+	if (env.contains(QString::fromLatin1("QTRAC_LOG"))) {
+		dbg.open(env.value(QString::fromLatin1("QTRAC_LOG")).toStdString().c_str(),ios::app);
+		if (!debug->good()) {
+			cerr << "Could not open file " << env.value(QString::fromLatin1("QTRAC_LOG")).toStdString() << endl;
+		}
+	}
+	dbg << "Env" << endl;
+	dbg << env.toStringList().join(QString::fromLatin1("\n")) << endl;
+	if (!env.contains(QString::fromLatin1("QTRAC_NOBANNER"))) {
+		qtrac::banner(stdout);
+	}
+
+	QSettings settings(QString::fromLatin1("Qtrac"), QString::fromLatin1("qik"));
+	//dbg << "Settings" << endl;
+	//dbg << settings.toStringList().join(QString::fromLatin1("\n"));
+	{
+		if (env.contains(QString::fromLatin1("QTRAC_OUTPUT_FILE"))) {
+			output_filename=env.value(QString::fromLatin1("QTRAC_OUTPUT_FILE"));
+		}
+		else {
+			if (!settings.contains(QString::fromLatin1("output/filename")))
+				settings.setValue(QString::fromLatin1("output/filename"), QString::fromLatin1("")); //file
+
+			output_filename=settings.value(QString::fromLatin1("output/filename")).toString();
+		}
+		dbg << "output_filename=" << output_filename.toStdString() << endl;
+	}
+
+	QString output_socket;
+	{
+		if (env.contains(QString::fromLatin1("QTRAC_OUTPUT_SOCKET"))) {
+			output_socket=env.value(QString::fromLatin1("QTRAC_OUTPUT_SOCKET"));
+		}
+		else {
+			if (!settings.contains(QString::fromLatin1("output/socket")))
+				settings.setValue(QString::fromLatin1("output/socket"), QString::fromLatin1("localhost:4242"));
+			output_socket=settings.value(QString::fromLatin1("output/socket")).toString();
+		}
+		dbg << "output_socket=" << output_socket.toStdString() << endl;
+	}
+	QStringList a=output_socket.split(QString::fromLatin1(":"));
+	if (a.size()>0) {
+		host=a[0];
+		if (a.size()>1) {
+			bool ok=true;
+			int p=a[1].toInt(&ok);
+			if (ok) port=p;
+		}
+	}
+/*
+	if (log) {
+		QHash<QString, QVariant> hash;
+		const QStringList keys = settings.allKeys();
+		for(const QString& key: keys) {
+		  hash[key] = settings.value(key);
+		}
+	}
+*/
+	connect_socket();
+
+/*
+	if (!output_socket.empty()) {
+   QByteArray data; // <-- fill with data
+
+    _pSocket = new QTcpSocket( this );
+    connect( _pSocket, SIGNAL(readyRead()), SLOT(readTcpData()) );
+
+    _pSocket->connectToHost("127.0.0.1", 9000);
+    if( _pSocket->waitForConnected() ) {
+        _pSocket->write( data );
+    }
+	}
+*/
+}
+
+c::~qik() {
+}
+
+qik& c::instance() {
+	return _qik_instance;
+}
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netdb.h>
+
+void c::log(string data, const void* sender, const void* receiver) { //data is "s QFileSystemWatcher::fileChanged(1) io/qfilesystemwatcher.h:71"
+//todo sync threads
+	Qt::HANDLE tid=QThread::currentThreadId();
+	ostringstream os;
+	os << tid << " " << sender << " " << receiver << " " << data << endl;
+//"<tid> <sender> <receiver> s QFileSystemWatcher::fileChanged(1) io/qfilesystemwatcher.h:71"
+	if (sockfd==0) return;
+	string sbuff=os.str();
+	const char* p=sbuff.c_str();
+        int tot=sbuff.size();
+	while(tot>0) {
+		int n=write(sockfd,p,tot);
+		if (n < 0)  {
+		     error("ERROR writing to socket");
+			 return;
+		}
+		tot-=n;
+		p+=n;
+	}
+/*
+    bzero(buffer,256);
+    n = read(sockfd,buffer,255);
+    if (n < 0)
+         error("ERROR reading from socket");
+    printf("%s\n",buffer);
+    return 0;
+*/
+
+}
+
+void c::read_conf() {
+
+}
+
+void c::error(string errmsg) {
+       dbg << errmsg << endl;
+
+}
+
+void c::connect_socket() {
+
+    struct sockaddr_in serv_addr;
+    struct hostent *server;
+
+    //char buffer[256];
+    sockfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (sockfd < 0) {
+        error("ERROR opening socket");
+		sockfd=0;
+		return;
+	}
+    server = gethostbyname(host.toUtf8().constData());
+    if (server == 0) {
+	    close(sockfd);
+		sockfd=0;
+        error("no such host");
+        return;
+    }
+    bzero((char *) &serv_addr, sizeof(serv_addr));
+    serv_addr.sin_family = AF_INET;
+    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
+    serv_addr.sin_port = htons(port);
+    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) {
+	    close(sockfd);
+		sockfd=0;
+        error("ERROR connecting");
+		return;
+	}
+
+}
+
+void c::disconnect() {
+	if (sockfd==0) return;
+    close(sockfd);
+	sockfd=0;
+}
+
+
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qik.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qik.h
@@ -0,0 +1,35 @@
+#ifndef QTRAC_QIK
+#define QTRAC_QIK
+
+#include <string>
+#include <QtCore/qglobal.h>
+#include <fstream>
+
+namespace qtrac {
+using namespace std;
+
+class Q_CORE_EXPORT qik {
+public:
+	qik();
+	~qik();
+
+	void log(std::string data, const void* sender, const void* receiver);
+	static qik& instance();
+
+private:
+	void read_conf();
+	void connect_socket();
+	void disconnect();
+	void error(string err);
+
+	fstream debug;
+	QString output_filename;
+	int port;
+	QString host;
+	int sockfd;
+};
+
+
+}
+
+#endif
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/Qtrac
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/Qtrac
@@ -0,0 +1,2 @@
+#include "qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/qtrac.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/qtrac.h
@@ -0,0 +1,3 @@
+#include "../../src/corelib/global/qik.h"
+#include "../../src/corelib/global/qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/generator.cpp
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/tools/moc/generator.cpp
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/generator.cpp
@@ -1158,8 +1158,11 @@ void Generator::generateStaticMetacall()
             const FunctionDef &f = methodList.at(methodindex);
             Q_ASSERT(!f.normalizedType.isEmpty());
             fprintf(out, "        case %d: ", methodindex);
+            fprintf(out, "{\n          ");
+            fprintf(out, "qtrac::qik::instance().log(\"%s\",_o->sender(),_o);\n          ",f.traceData(*cdef).c_str());
+
             if (f.normalizedType != "void")
-                fprintf(out, "{ %s _r = ", noRef(f.normalizedType).constData());
+                fprintf(out, "%s _r = ", noRef(f.normalizedType).constData());
             fprintf(out, "_t->");
             if (f.inPrivateClass.size())
                 fprintf(out, "%s->", f.inPrivateClass.constData());
@@ -1181,11 +1184,11 @@ void Generator::generateStaticMetacall()
             }
             fprintf(out, ");");
             if (f.normalizedType != "void") {
-                fprintf(out, "\n            if (_a[0]) *reinterpret_cast< %s*>(_a[0]) = _r; } ",
+                fprintf(out, "\n         if (_a[0]) *reinterpret_cast< %s*>(_a[0]) = _r;\n          ",
                         noRef(f.normalizedType).constData());
                 isUsed_a = true;
             }
-            fprintf(out, " break;\n");
+            fprintf(out, " break;\n          }\n");
         }
         fprintf(out, "        default: ;\n");
         fprintf(out, "        }\n");
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/moc.cpp
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/tools/moc/moc.cpp
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/moc.cpp
@@ -34,12 +34,27 @@
 #include <QtCore/qfile.h>
 #include <QtCore/qfileinfo.h>
 #include <QtCore/qdir.h>
+#include <QtCore/qtrac_bootstrap.h>
+#include <sstream>
 
 // for normalizeTypeInternal
 #include <private/qmetaobject_moc_p.h>
 
+
+
 QT_BEGIN_NAMESPACE
 
+std::string FunctionDef::traceData(const ClassDef& cd) const {
+	std::ostringstream os;
+	if (isSignal) os << "S";
+	else if (isPrivateSignal) os << "s";
+	else if (isSlot) os << "T";
+	else os << "?";
+    os << " " << cd.classname.toStdString() << "::" << name.toStdString() << "(" << arguments.size() << ") " << file.toStdString() << ":" << line;
+	return os.str();
+}
+
+
 // only moc needs this function
 static QByteArray normalizeType(const QByteArray &ba, bool fixScope = false)
 {
@@ -419,7 +434,8 @@ bool Moc::parseFunction(FunctionDef *def
     }
 
     def->normalizedType = normalizeType(def->type.name);
-
+	def->file=filename;
+	def->line=symbols[index].lineNum;
     if (!test(RPAREN)) {
         parseFunctionArguments(def);
         next(RPAREN);
@@ -871,6 +887,9 @@ void Moc::generate(FILE *out)
     fprintf(out, "** WARNING! All changes made in this file will be lost!\n"
             "*****************************************************************************/\n\n");
 
+	fprintf(out, "/*\n");
+	qtrac::banner(out);
+	fprintf(out, "*/\n");
 
     if (!noInclude) {
         if (includePath.size() && !includePath.endsWith('/'))
@@ -897,6 +916,7 @@ void Moc::generate(FILE *out)
     for (const QByteArray &qtContainer : qtContainers)
         fprintf(out, "#include <QtCore/%s>\n", qtContainer.constData());
 
+    fprintf(out, "#include <QtCore/Qtrac>\n");
 
     fprintf(out, "#if !defined(Q_MOC_OUTPUT_REVISION)\n"
             "#error \"The header file '%s' doesn't include <QObject>.\"\n", fn.constData());
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/moc.h
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/tools/moc/moc.h
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/moc/moc.h
@@ -38,6 +38,7 @@
 #include <qjsonobject.h>
 #include <stdio.h>
 #include <ctype.h>
+#include <string>
 
 QT_BEGIN_NAMESPACE
 
@@ -80,12 +81,14 @@ struct ArgumentDef
 };
 Q_DECLARE_TYPEINFO(ArgumentDef, Q_MOVABLE_TYPE);
 
+struct ClassDef;
+
 struct FunctionDef
 {
     FunctionDef(): returnTypeIsVolatile(false), access(Private), isConst(false), isVirtual(false), isStatic(false),
                    inlineCode(false), wasCloned(false), isCompat(false), isInvokable(false),
                    isScriptable(false), isSlot(false), isSignal(false), isPrivateSignal(false),
-                   isConstructor(false), isDestructor(false), isAbstract(false), revision(0) {}
+                   isConstructor(false), isDestructor(false), isAbstract(false), revision(0), line(-1) {}
     Type type;
     QByteArray normalizedType;
     QByteArray tag;
@@ -114,6 +117,10 @@ struct FunctionDef
     bool isAbstract;
 
     int revision;
+
+	QByteArray file;
+	int line;
+	std::string traceData(const ClassDef&) const;
 };
 Q_DECLARE_TYPEINFO(FunctionDef, Q_MOVABLE_TYPE);
 
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/bootstrap/bootstrap.pro
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/tools/bootstrap/bootstrap.pro
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/tools/bootstrap/bootstrap.pro
@@ -36,6 +36,7 @@ SOURCES += \
            ../../corelib/global/qlogging.cpp \
            ../../corelib/global/qmalloc.cpp \
            ../../corelib/global/qnumeric.cpp \
+           ../../corelib/global/qtrac.cpp \
            ../../corelib/io/qabstractfileengine.cpp \
            ../../corelib/io/qbuffer.cpp \
            ../../corelib/io/qdatastream.cpp \
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/qtrac_bootstrap.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/include/QtCore/qtrac_bootstrap.h
@@ -0,0 +1,2 @@
+#include "../../src/corelib/global/qtrac.h"
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qtrac.cpp
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qtrac.cpp
@@ -0,0 +1,32 @@
+#include "qtrac.h"
+
+void qtrac::banner(FILE* out) {
+fprintf(out, ".                                                                                .\n");
+fprintf(out, ".                                      >WWw,                                     .\n");
+fprintf(out, ".                                       `)WWW                                    .\n");
+fprintf(out, ".                                         )8WWu                ,uwu,             .\n");
+fprintf(out, ".                                          88WWWu            yWWWWWWWW,          .\n");
+fprintf(out, ".                                           `8WWWWwu,       8#WWWWWWWW`          .\n");
+fprintf(out, ".                                             '8WWWWWWWWwwwWWWWWWWWW*`           .\n");
+fprintf(out, ".                                               `8WWWWWWWWWWWWWWWW*`             .\n");
+fprintf(out, ".                                                ##WWWWWWWWWWWW*`                .\n");
+fprintf(out, ".   ,,,ywu                                     y#WWWWWWWWWWWWWWWWWWWWWWWwwuuywwW>.\n");
+fprintf(out, ".WWWWWWWWWWWWWWWWWWwu,                       ,&#WWWWWWWWWWWWWWWWW==WWWWW=====**^ .\n");
+fprintf(out, ". `^***====WWWWWWWWWWWWWWwwu,,,,uwWWWWWWw,,uWWWWWWWWWWWWWWWWW`                   .\n");
+fprintf(out, ".            `*===WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW                     .\n");
+fprintf(out, ".                 `=WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW*`                      .\n");
+fprintf(out, ".                    `*==WWWWWWWWWWWWWWWWWWWWWWWWWWWW*`                          .\n");
+fprintf(out, ".                        `*==WWWWWWWWWWWWWWWWWWWW=*`                             .\n");
+fprintf(out, ".                             ^*===WWWWWWWWWW=*`                                 .\n");
+fprintf(out, ".                    .d88888b.  888                                              .\n");
+fprintf(out, ".                   d88P' 'Y88b 888                                              .\n");
+fprintf(out, ".                   888     888 888                                              .\n");
+fprintf(out, ".                   888     888 888888 888d888 8888b.   .d8888b                  .\n");
+fprintf(out, ".                   888     888 888    888P'      '88b d88P'                     .\n");
+fprintf(out, ".                   888 Y8b 888 888    888    .d888888 888                       .\n");
+fprintf(out, ".                   Y88b.Y8b88P Y88b.  888    888  888 Y88b.                     .\n");
+fprintf(out, ".                    'Y888888'   'Y888 888    'Y888888  'Y8888P                  .\n");
+fprintf(out, ".                          Y8b                                                   .\n");
+fprintf(out, ".                                                                                .\n");
+}
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qtrac.h
===================================================================
--- /dev/null
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/global/qtrac.h
@@ -0,0 +1,17 @@
+#ifndef QTRAC_QTRAC
+#define QTRAC_QTRAC
+
+
+#include <stdio.h>
+#include <QtCore/qglobal.h>
+
+namespace qtrac {
+
+void Q_CORE_EXPORT banner(FILE*);
+
+
+}
+
+#endif
+
+
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/kernel/qobject.h
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/src/corelib/kernel/qobject.h
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/src/corelib/kernel/qobject.h
@@ -422,8 +422,9 @@ public:
 public Q_SLOTS:
     void deleteLater();
 
-protected:
+public:
     QObject *sender() const;
+protected:
     int senderSignalIndex() const;
     int receivers(const char* signal) const;
     bool isSignalConnected(const QMetaMethod &signal) const;
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/README
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/README
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/README
@@ -1,3 +1,11 @@
+WARNING
+=======
+ This package has been patched with Qtrac.
+
+ Don't use the generated Qt libraries in
+ a production environment, it is only suitable
+ for analysis or debugging purposes.
+
 HOW TO BUILD QT5
 ================
 
Index: qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/configure
===================================================================
--- qt-everywhere-opensource-src-5.7.0-qtrac-1.0.orig/qtbase/configure
+++ qt-everywhere-opensource-src-5.7.0-qtrac-1.0/qtbase/configure
@@ -3589,7 +3589,7 @@ if [ -z "$QT_INSTALL_PREFIX" ]; then
     if [ "$CFG_DEV" = "yes" ]; then
         QT_INSTALL_PREFIX="$outpath" # In Development, we use sandboxed builds by default
     else
-        QT_INSTALL_PREFIX="/usr/local/Qt-${QT_VERSION}" # the default install prefix is /usr/local/Qt-$QT_VERSION
+        QT_INSTALL_PREFIX="/usr/local/Qt-${QT_VERSION}-qtrac-1.0" # the default install prefix is /usr/local/Qt-$QT_VERSION
     fi
 fi
 QT_INSTALL_PREFIX=`makeabs "$QT_INSTALL_PREFIX"`
